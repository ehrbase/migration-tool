/*
 * Copyright (c) 2024 vitasystems GmbH
 *
 * This file is part of project EHRbase Migration Tool
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ehrbase.migration.importer.v4.jooq.pg.tables;

import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;
import org.ehrbase.migration.importer.v4.jooq.pg.Keys;
import org.ehrbase.migration.importer.v4.jooq.pg.tables.records.EhrRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Ehr extends TableImpl<EhrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ehr.ehr</code>
     */
    public static final Ehr EHR_ = new Ehr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EhrRecord> getRecordType() {
        return EhrRecord.class;
    }

    /**
     * The column <code>ehr.ehr.id</code>.
     */
    public final TableField<EhrRecord, UUID> ID =
            createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr.creation_date</code>.
     */
    public final TableField<EhrRecord, OffsetDateTime> CREATION_DATE =
            createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Ehr(Name alias, Table<EhrRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ehr(Name alias, Table<EhrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ehr.ehr</code> table reference
     */
    public Ehr(String alias) {
        this(DSL.name(alias), EHR_);
    }

    /**
     * Create an aliased <code>ehr.ehr</code> table reference
     */
    public Ehr(Name alias) {
        this(alias, EHR_);
    }

    /**
     * Create a <code>ehr.ehr</code> table reference
     */
    public Ehr() {
        this(DSL.name("ehr"), null);
    }

    public <O extends Record> Ehr(Table<O> child, ForeignKey<O, EhrRecord> key) {
        super(child, key, EHR_);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : org.ehrbase.migration.importer.v4.jooq.pg.Ehr.EHR;
    }

    @Override
    public UniqueKey<EhrRecord> getPrimaryKey() {
        return Keys.EHR_PKEY;
    }

    @Override
    public Ehr as(String alias) {
        return new Ehr(DSL.name(alias), this);
    }

    @Override
    public Ehr as(Name alias) {
        return new Ehr(alias, this);
    }

    @Override
    public Ehr as(Table<?> alias) {
        return new Ehr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ehr rename(String name) {
        return new Ehr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ehr rename(Name name) {
        return new Ehr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ehr rename(Table<?> name) {
        return new Ehr(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, OffsetDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(
            Class<U> toType, Function2<? super UUID, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
