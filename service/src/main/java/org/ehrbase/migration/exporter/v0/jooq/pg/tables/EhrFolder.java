/*
 * Copyright (c) 2023 vitasystems GmbH
 *
 * This file is part of project EHRbase Migration Tool
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ehrbase.migration.exporter.v0.jooq.pg.tables;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;
import org.ehrbase.migration.exporter.v0.jooq.pg.Ehr;
import org.ehrbase.migration.exporter.v0.jooq.pg.Keys;
import org.ehrbase.migration.exporter.v0.jooq.pg.tables.records.EhrFolderRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EhrFolder extends TableImpl<EhrFolderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ehr.ehr_folder</code>
     */
    public static final EhrFolder EHR_FOLDER = new EhrFolder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EhrFolderRecord> getRecordType() {
        return EhrFolderRecord.class;
    }

    /**
     * The column <code>ehr.ehr_folder.id</code>.
     */
    public final TableField<EhrFolderRecord, UUID> ID =
            createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.ehr_id</code>.
     */
    public final TableField<EhrFolderRecord, UUID> EHR_ID =
            createField(DSL.name("ehr_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.ehr_folders_idx</code>.
     */
    public final TableField<EhrFolderRecord, Integer> EHR_FOLDERS_IDX =
            createField(DSL.name("ehr_folders_idx"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.row_num</code>.
     */
    public final TableField<EhrFolderRecord, Integer> ROW_NUM =
            createField(DSL.name("row_num"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.contribution_id</code>.
     */
    public final TableField<EhrFolderRecord, UUID> CONTRIBUTION_ID =
            createField(DSL.name("contribution_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.audit_id</code>.
     */
    public final TableField<EhrFolderRecord, UUID> AUDIT_ID =
            createField(DSL.name("audit_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.archetype_node_id</code>.
     */
    public final TableField<EhrFolderRecord, String> ARCHETYPE_NODE_ID =
            createField(DSL.name("archetype_node_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.ehr_folder.path</code>.
     */
    public final TableField<EhrFolderRecord, String[]> PATH =
            createField(DSL.name("path"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>ehr.ehr_folder.hierarchy_idx</code>.
     */
    public final TableField<EhrFolderRecord, String> HIERARCHY_IDX =
            createField(DSL.name("hierarchy_idx"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.hierarchy_idx_cap</code>.
     */
    public final TableField<EhrFolderRecord, String> HIERARCHY_IDX_CAP =
            createField(DSL.name("hierarchy_idx_cap"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.hierarchy_idx_len</code>.
     */
    public final TableField<EhrFolderRecord, Integer> HIERARCHY_IDX_LEN =
            createField(DSL.name("hierarchy_idx_len"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.items</code>.
     */
    public final TableField<EhrFolderRecord, UUID[]> ITEMS =
            createField(DSL.name("items"), SQLDataType.UUID.array(), this, "");

    /**
     * The column <code>ehr.ehr_folder.fields</code>.
     */
    public final TableField<EhrFolderRecord, JSONB> FIELDS =
            createField(DSL.name("fields"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>ehr.ehr_folder.sys_version</code>.
     */
    public final TableField<EhrFolderRecord, Integer> SYS_VERSION =
            createField(DSL.name("sys_version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.sys_period_lower</code>.
     */
    public final TableField<EhrFolderRecord, OffsetDateTime> SYS_PERIOD_LOWER = createField(
            DSL.name("sys_period_lower"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>ehr.ehr_folder.sys_tenant</code>.
     */
    public final TableField<EhrFolderRecord, Short> SYS_TENANT = createField(
            DSL.name("sys_tenant"),
            SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.SMALLINT)),
            this,
            "");

    private EhrFolder(Name alias, Table<EhrFolderRecord> aliased) {
        this(alias, aliased, null);
    }

    private EhrFolder(Name alias, Table<EhrFolderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ehr.ehr_folder</code> table reference
     */
    public EhrFolder(String alias) {
        this(DSL.name(alias), EHR_FOLDER);
    }

    /**
     * Create an aliased <code>ehr.ehr_folder</code> table reference
     */
    public EhrFolder(Name alias) {
        this(alias, EHR_FOLDER);
    }

    /**
     * Create a <code>ehr.ehr_folder</code> table reference
     */
    public EhrFolder() {
        this(DSL.name("ehr_folder"), null);
    }

    public <O extends Record> EhrFolder(Table<O> child, ForeignKey<O, EhrFolderRecord> key) {
        super(child, key, EHR_FOLDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ehr.EHR;
    }

    @Override
    public UniqueKey<EhrFolderRecord> getPrimaryKey() {
        return Keys.EHR_FOLDER_PKEY;
    }

    @Override
    public List<ForeignKey<EhrFolderRecord, ?>> getReferences() {
        return Arrays.asList(
                Keys.EHR_FOLDER__EHR_FOLDER_EHR_ID_FKEY,
                Keys.EHR_FOLDER__EHR_FOLDER_CONTRIBUTION_ID_FKEY,
                Keys.EHR_FOLDER__EHR_FOLDER_AUDIT_ID_FKEY,
                Keys.EHR_FOLDER__EHR_FOLDER_SYS_TENANT_FKEY);
    }

    private transient org.ehrbase.migration.exporter.v0.jooq.pg.tables.Ehr _ehr;
    private transient Contribution _contribution;
    private transient AuditDetails _auditDetails;
    private transient Tenant _tenant;

    /**
     * Get the implicit join path to the <code>ehr.ehr</code> table.
     */
    public org.ehrbase.migration.exporter.v0.jooq.pg.tables.Ehr ehr() {
        if (_ehr == null)
            _ehr = new org.ehrbase.migration.exporter.v0.jooq.pg.tables.Ehr(
                    this, Keys.EHR_FOLDER__EHR_FOLDER_EHR_ID_FKEY);

        return _ehr;
    }

    /**
     * Get the implicit join path to the <code>ehr.contribution</code> table.
     */
    public Contribution contribution() {
        if (_contribution == null)
            _contribution = new Contribution(this, Keys.EHR_FOLDER__EHR_FOLDER_CONTRIBUTION_ID_FKEY);

        return _contribution;
    }

    /**
     * Get the implicit join path to the <code>ehr.audit_details</code> table.
     */
    public AuditDetails auditDetails() {
        if (_auditDetails == null) _auditDetails = new AuditDetails(this, Keys.EHR_FOLDER__EHR_FOLDER_AUDIT_ID_FKEY);

        return _auditDetails;
    }

    /**
     * Get the implicit join path to the <code>ehr.tenant</code> table.
     */
    public Tenant tenant() {
        if (_tenant == null) _tenant = new Tenant(this, Keys.EHR_FOLDER__EHR_FOLDER_SYS_TENANT_FKEY);

        return _tenant;
    }

    @Override
    public EhrFolder as(String alias) {
        return new EhrFolder(DSL.name(alias), this);
    }

    @Override
    public EhrFolder as(Name alias) {
        return new EhrFolder(alias, this);
    }

    @Override
    public EhrFolder as(Table<?> alias) {
        return new EhrFolder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EhrFolder rename(String name) {
        return new EhrFolder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EhrFolder rename(Name name) {
        return new EhrFolder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EhrFolder rename(Table<?> name) {
        return new EhrFolder(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<
                    UUID,
                    UUID,
                    Integer,
                    Integer,
                    UUID,
                    UUID,
                    String,
                    String[],
                    String,
                    String,
                    Integer,
                    UUID[],
                    JSONB,
                    Integer,
                    OffsetDateTime,
                    Short>
            fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(
            Function16<
                            ? super UUID,
                            ? super UUID,
                            ? super Integer,
                            ? super Integer,
                            ? super UUID,
                            ? super UUID,
                            ? super String,
                            ? super String[],
                            ? super String,
                            ? super String,
                            ? super Integer,
                            ? super UUID[],
                            ? super JSONB,
                            ? super Integer,
                            ? super OffsetDateTime,
                            ? super Short,
                            ? extends U>
                    from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(
            Class<U> toType,
            Function16<
                            ? super UUID,
                            ? super UUID,
                            ? super Integer,
                            ? super Integer,
                            ? super UUID,
                            ? super UUID,
                            ? super String,
                            ? super String[],
                            ? super String,
                            ? super String,
                            ? super Integer,
                            ? super UUID[],
                            ? super JSONB,
                            ? super Integer,
                            ? super OffsetDateTime,
                            ? super Short,
                            ? extends U>
                    from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
