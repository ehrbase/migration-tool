/*
 * Copyright (c) 2023 vitasystems GmbH
 *
 * This file is part of project EHRbase Migration Tool
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ehrbase.migration.exporter.v0.jooq.pg.tables.records;

import java.util.UUID;
import org.ehrbase.migration.exporter.v0.jooq.pg.tables.Users;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record3<String, UUID, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ehr.users.username</code>.
     */
    public void setUsername(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>ehr.users.username</code>.
     */
    public String getUsername() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ehr.users.party_id</code>.
     */
    public void setPartyId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>ehr.users.party_id</code>.
     */
    public UUID getPartyId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>ehr.users.sys_tenant</code>.
     */
    public void setSysTenant(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>ehr.users.sys_tenant</code>.
     */
    public Short getSysTenant() {
        return (Short) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, Short> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, UUID, Short> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, UUID, Short> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Users.USERS.USERNAME;
    }

    @Override
    public Field<UUID> field2() {
        return Users.USERS.PARTY_ID;
    }

    @Override
    public Field<Short> field3() {
        return Users.USERS.SYS_TENANT;
    }

    @Override
    public String component1() {
        return getUsername();
    }

    @Override
    public UUID component2() {
        return getPartyId();
    }

    @Override
    public Short component3() {
        return getSysTenant();
    }

    @Override
    public String value1() {
        return getUsername();
    }

    @Override
    public UUID value2() {
        return getPartyId();
    }

    @Override
    public Short value3() {
        return getSysTenant();
    }

    @Override
    public UsersRecord value1(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public UsersRecord value2(UUID value) {
        setPartyId(value);
        return this;
    }

    @Override
    public UsersRecord value3(Short value) {
        setSysTenant(value);
        return this;
    }

    @Override
    public UsersRecord values(String value1, UUID value2, Short value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(String username, UUID partyId, Short sysTenant) {
        super(Users.USERS);

        setUsername(username);
        setPartyId(partyId);
        setSysTenant(sysTenant);
        resetChangedOnNotNull();
    }
}
