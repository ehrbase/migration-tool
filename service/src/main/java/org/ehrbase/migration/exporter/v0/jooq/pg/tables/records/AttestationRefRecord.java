/*
 * Copyright (c) 2023 vitasystems GmbH
 *
 * This file is part of project EHRbase Migration Tool
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ehrbase.migration.exporter.v0.jooq.pg.tables.records;

import java.util.UUID;
import org.ehrbase.migration.exporter.v0.jooq.pg.tables.AttestationRef;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AttestationRefRecord extends UpdatableRecordImpl<AttestationRefRecord> implements Record2<UUID, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ehr.attestation_ref.ref</code>.
     */
    public void setRef(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>ehr.attestation_ref.ref</code>.
     */
    public UUID getRef() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>ehr.attestation_ref.sys_tenant</code>.
     */
    public void setSysTenant(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>ehr.attestation_ref.sys_tenant</code>.
     */
    public Short getSysTenant() {
        return (Short) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, Short> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, Short> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, Short> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return AttestationRef.ATTESTATION_REF.REF;
    }

    @Override
    public Field<Short> field2() {
        return AttestationRef.ATTESTATION_REF.SYS_TENANT;
    }

    @Override
    public UUID component1() {
        return getRef();
    }

    @Override
    public Short component2() {
        return getSysTenant();
    }

    @Override
    public UUID value1() {
        return getRef();
    }

    @Override
    public Short value2() {
        return getSysTenant();
    }

    @Override
    public AttestationRefRecord value1(UUID value) {
        setRef(value);
        return this;
    }

    @Override
    public AttestationRefRecord value2(Short value) {
        setSysTenant(value);
        return this;
    }

    @Override
    public AttestationRefRecord values(UUID value1, Short value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AttestationRefRecord
     */
    public AttestationRefRecord() {
        super(AttestationRef.ATTESTATION_REF);
    }

    /**
     * Create a detached, initialised AttestationRefRecord
     */
    public AttestationRefRecord(UUID ref, Short sysTenant) {
        super(AttestationRef.ATTESTATION_REF);

        setRef(ref);
        setSysTenant(sysTenant);
        resetChangedOnNotNull();
    }
}
